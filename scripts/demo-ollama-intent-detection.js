/**
 * Demo simple del servicio especializado de detecci√≥n de intenciones con Ollama
 * Este script muestra c√≥mo utilizar el servicio directamente
 */

require('dotenv').config();
const { logger } = require('../src/utils/logger');
const ollamaIntentService = require('../src/services/ollamaIntentDetectionService');
const { getIntentsForNLP } = require('../src/services/intentService');
const { connectDB } = require('../src/config/database');
const mongoose = require('mongoose');

/**
 * Mensajes de prueba para la demostraci√≥n
 */
const demoMessages = [
  "Hola, buenos d√≠as",
  "Quiero saber c√≥mo crear un reporte de ventas mensual",
  "¬øCu√°nto cuesta la licencia del sistema?",
  "Estoy teniendo un problema con la facturaci√≥n",
  "Me gustar√≠a probar el sistema durante 15 d√≠as"
];

/**
 * Funci√≥n principal de demostraci√≥n
 */
async function runDemo() {
  try {
    logger.info('üöÄ DEMO: Detecci√≥n de Intenciones con Ollama\n');
    
    // Conectar a MongoDB
    await connectDB();
    logger.info('‚úÖ Conectado a MongoDB\n');
    
    // Verificar conexi√≥n con Ollama
    logger.info('üîå Verificando conexi√≥n con Ollama...');
    const connected = await ollamaIntentService.testConnection();
    
    if (!connected) {
      logger.error('‚ùå No se pudo conectar con Ollama. Verifique que est√© ejecut√°ndose.');
      process.exit(1);
    }
    
    // Obtener informaci√≥n del modelo
    const modelInfo = await ollamaIntentService.getModelInfo();
    logger.info(`‚úÖ Conectado a Ollama. Usando modelo: ${modelInfo.model}\n`);
    
    // Obtener intenciones disponibles
    const nlpData = await getIntentsForNLP();
    logger.info(`üìö Intenciones disponibles: ${nlpData.supportedIntents.length}`);
    logger.info(`üìä Ejemplos disponibles: ${Object.keys(nlpData.intentExamples).length}\n`);
    
    // Procesar cada mensaje de demostraci√≥n
    logger.info('üß™ EJEMPLOS DE DETECCI√ìN DE INTENCIONES:');
    logger.info('======================================\n');
    
    for (const message of demoMessages) {
      logger.info(`üìù MENSAJE: "${message}"`);
      
      // Iniciar temporizador
      const startTime = Date.now();
      
      // Detectar intenciones
      const result = await ollamaIntentService.detectIntentions(message);
      
      // Calcular tiempo transcurrido
      const elapsed = Date.now() - startTime;
      
      // Mostrar resultados
      logger.info(`‚ú® INTENCIONES DETECTADAS: ${JSON.stringify(result.intents)}`);
      logger.info(`‚è±Ô∏è Tiempo de respuesta: ${elapsed}ms\n`);
      
      // Si hay intenciones, mostrar posibles acciones
      if (result.intents && result.intents.length > 0) {
        logger.info('üîç POSIBLES ACCIONES BASADAS EN INTENCIONES:');
        
        result.intents.forEach(intent => {
          switch(intent) {
            case 'saludo':
              logger.info('  - Responder con un saludo personalizado');
              break;
            case 'guia_reportes':
              logger.info('  - Mostrar tutorial de creaci√≥n de reportes');
              logger.info('  - Ofrecer plantillas de reportes comunes');
              break;
            case 'consulta_precio':
              logger.info('  - Mostrar informaci√≥n de precios');
              logger.info('  - Ofrecer contacto con ventas');
              break;
            case 'soporte_tecnico':
              logger.info('  - Crear ticket de soporte');
              logger.info('  - Ofrecer documentaci√≥n relevante');
              break;
            case 'solicitud_prueba':
              logger.info('  - Iniciar flujo de creaci√≥n de cuenta de prueba');
              logger.info('  - Solicitar datos de contacto');
              break;
            default:
              logger.info(`  - Manejar intenci√≥n: ${intent}`);
          }
        });
        
        logger.info('');
      }
      
      // Peque√±a pausa entre ejemplos
      await new Promise(resolve => setTimeout(resolve, 500));
    }
    
    logger.info('‚úÖ DEMOSTRACI√ìN COMPLETADA\n');
    logger.info('üí° Para usar en producci√≥n, configure:');
    logger.info('  - NLP_SERVICE_VERSION=v2 en .env');
    logger.info('  - OLLAMA_INTENT_MODEL=<modelo-preferido> en .env');
    logger.info('\nConsulte OLLAMA_INTENT_MIGRATION.md para m√°s detalles');
    
  } catch (error) {
    logger.error(`‚ùå Error en la demostraci√≥n: ${error.message}`);
    console.error(error);
  } finally {
    // Cerrar conexi√≥n a MongoDB
    await mongoose.connection.close();
    process.exit(0);
  }
}

// Ejecutar la demostraci√≥n
runDemo();